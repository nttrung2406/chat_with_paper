{"ast":null,"code":"import axios from \"axios\";\nconst API_BASE = \"http://127.0.0.1:8000\";\nexport const uploadPDF = async file => {\n  const formData = new FormData();\n  formData.append(\"file\", file);\n  return axios.post(`${API_BASE}/pdf/upload`, formData, {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    }\n  });\n};\nexport async function chatWithRAG(prompt) {\n  try {\n    const response = await fetch(\"http://127.0.0.1:8000/chat/text\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        prompt\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    const data = await response.json();\n    if (!data.answer) {\n      throw new Error(\"Invalid response structure from backend\");\n    }\n    return data.answer;\n  } catch (error) {\n    console.error(\"Chat failed:\", error);\n    return \"Error: Unable to get a response from the server.\";\n  }\n}","map":{"version":3,"names":["axios","API_BASE","uploadPDF","file","formData","FormData","append","post","headers","chatWithRAG","prompt","response","fetch","method","body","JSON","stringify","ok","Error","status","data","json","answer","error","console"],"sources":["E:/Project/RAG/chat_with_paper/frontend/src/api.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_BASE = \"http://127.0.0.1:8000\"; \r\n\r\nexport const uploadPDF = async (file) => {\r\n  const formData = new FormData();\r\n  formData.append(\"file\", file);\r\n  return axios.post(`${API_BASE}/pdf/upload`, formData, {\r\n    headers: { \"Content-Type\": \"multipart/form-data\" },\r\n  });\r\n};\r\n\r\n\r\n\r\nexport async function chatWithRAG(prompt) {\r\n  try {\r\n      const response = await fetch(\"http://127.0.0.1:8000/chat/text\", {\r\n          method: \"POST\",\r\n          headers: {\r\n              \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({ prompt }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n          throw new Error(`HTTP error! Status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      if (!data.answer) {\r\n          throw new Error(\"Invalid response structure from backend\");\r\n      }\r\n\r\n      return data.answer; \r\n  } catch (error) {\r\n      console.error(\"Chat failed:\", error);\r\n      return \"Error: Unable to get a response from the server.\";\r\n  }\r\n}\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,QAAQ,GAAG,uBAAuB;AAExC,OAAO,MAAMC,SAAS,GAAG,MAAOC,IAAI,IAAK;EACvC,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;EAC7B,OAAOH,KAAK,CAACO,IAAI,CAAC,GAAGN,QAAQ,aAAa,EAAEG,QAAQ,EAAE;IACpDI,OAAO,EAAE;MAAE,cAAc,EAAE;IAAsB;EACnD,CAAC,CAAC;AACJ,CAAC;AAID,OAAO,eAAeC,WAAWA,CAACC,MAAM,EAAE;EACxC,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,EAAE;MAC5DC,MAAM,EAAE,MAAM;MACdL,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDM,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEN;MAAO,CAAC;IACnC,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACM,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,uBAAuBP,QAAQ,CAACQ,MAAM,EAAE,CAAC;IAC7D;IAEA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;IAElC,IAAI,CAACD,IAAI,CAACE,MAAM,EAAE;MACd,MAAM,IAAIJ,KAAK,CAAC,yCAAyC,CAAC;IAC9D;IAEA,OAAOE,IAAI,CAACE,MAAM;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;IACpC,OAAO,kDAAkD;EAC7D;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}